{"ast":null,"code":"var _jsxFileName = \"/Users/ivcmbp069adm/Desktop/challenge/src/components/Comment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst updateCommentsForUser = async reqObj => {\n  const response = await axios.post(`http://localhost:5000/api/comments`, reqObj);\n\n  if (response.status !== 200) {\n    const text = await response.text();\n    throw new Error(text);\n  }\n\n  return await response;\n};\n\nconst Comment = ({\n  currentUserID,\n  itemID\n}) => {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    margin: {\n      // margin: theme.spacing(1),\n      // marginLeft: theme.spacing.unit,\n      // marginRight: theme.spacing.unit,\n      border: \"1px solid black\",\n      padding: 2\n    }\n  }));\n  const classes = useStyles();\n  const [commentVal, setCommentVal] = useState(\"\");\n  const [commentArr, setcommentArr] = useState([]);\n  useEffect(async () => {\n    const response = itemID && (await axios.get(`http://localhost:5000/api/item?itemID=${itemID}`));\n\n    if (response) {\n      setcommentArr(response.data.comments || []);\n    }\n  }, []);\n\n  const submithandler = async () => {\n    const newCommentArr = [...commentArr];\n    newCommentArr.push({\n      comment: commentVal,\n      timeStamp: new Date(),\n      itemID: itemID,\n      currentUserID: currentUserID\n    });\n    const fetchedItems = await updateCommentsForUser({\n      comment: commentVal,\n      timeStamp: new Date(),\n      itemID: itemID,\n      currentUserID: currentUserID\n    });\n    console.log(\"fetchedItems\", fetchedItems);\n\n    if (fetchedItems) {\n      setcommentArr(newCommentArr);\n      setCommentVal(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [console.log(commentVal), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      value: commentVal,\n      onChange: e => setCommentVal(e.target.value),\n      placeholder: \"Add a Comment\",\n      id: \"input-with-icon-textfield\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\",\n          children: /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      href: \"#contained-buttons\",\n      onClick: submithandler,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commentArr.map((val, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: val.comment\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Comment, \"dug43WUAnYIh9ICX7bioPXQHdL0=\", true);\n\n_c = Comment;\nexport default Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/Users/ivcmbp069adm/Desktop/challenge/src/components/Comment.js"],"names":["React","useState","useEffect","TextField","makeStyles","InputAdornment","PersonIcon","Button","axios","updateCommentsForUser","reqObj","response","post","status","text","Error","Comment","currentUserID","itemID","useStyles","theme","margin","border","padding","classes","commentVal","setCommentVal","commentArr","setcommentArr","get","data","comments","submithandler","newCommentArr","push","comment","timeStamp","Date","fetchedItems","console","log","display","flexDirection","e","target","value","startAdornment","map","val","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,qBAAqB,GAAG,MAAMC,MAAN,IAAgB;AAC5C,QAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAY,oCAAZ,EAAgDF,MAAhD,CAAvB;;AAEA,MAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACD;;AAED,SAAO,MAAMH,QAAb;AACD,CATD;;AAYA,MAAMK,OAAO,GAAG,CAAC;AAACC,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,CAAD,KAA6B;AAAA;;AACzC,QAAMC,SAAS,GAAGf,UAAU,CAAEgB,KAAD,KAAY;AACrCC,IAAAA,MAAM,EAAE;AACN;AACA;AACA;AACAC,MAAAA,MAAM,EAAE,iBAJF;AAKNC,MAAAA,OAAO,EAAE;AALH;AAD6B,GAAZ,CAAD,CAA5B;AASE,QAAMC,OAAO,GAAGL,SAAS,EAAzB;AAEF,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAE,YAAY;AACrB,UAAMS,QAAQ,GAAGO,MAAM,KAAI,MAAMV,KAAK,CAACqB,GAAN,CAAW,yCAAwCX,MAAO,EAA1D,CAAV,CAAvB;;AACA,QAAGP,QAAH,EAAY;AACViB,MAAAA,aAAa,CAACjB,QAAQ,CAACmB,IAAT,CAAcC,QAAd,IAA0B,EAA3B,CAAb;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,aAAa,GAAG,YAAY;AAC9B,UAAMC,aAAa,GAAG,CAAC,GAAGN,UAAJ,CAAtB;AACAM,IAAAA,aAAa,CAACC,IAAd,CAAmB;AACfC,MAAAA,OAAO,EAAEV,UADM;AAEfW,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAFI;AAGfnB,MAAAA,MAAM,EAAEA,MAHO;AAIfD,MAAAA,aAAa,EAAEA;AAJA,KAAnB;AAMA,UAAMqB,YAAY,GAAG,MAAM7B,qBAAqB,CAAC;AAC/C0B,MAAAA,OAAO,EAAEV,UADsC;AAE/CW,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAFoC;AAG/CnB,MAAAA,MAAM,EAAEA,MAHuC;AAI/CD,MAAAA,aAAa,EAAEA;AAJgC,KAAD,CAAhD;AAMFsB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,YAA3B;;AACA,QAAGA,YAAH,EAAgB;AACdV,MAAAA,aAAa,CAACK,aAAD,CAAb;AACAP,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,GAnBD;;AAsBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACe,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,aAAa,EAAE;AAAjC,KAAZ;AAAA,eACKH,OAAO,CAACC,GAAR,CAAYf,UAAZ,CADL,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,SAAD;AACJ,MAAA,SAAS,EAAED,OAAO,CAACH,MADf;AAEJ,MAAA,KAAK,EAAEI,UAFH;AAGJ,MAAA,QAAQ,EAAGkB,CAAD,IAAOjB,aAAa,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAH1B;AAIJ,MAAA,WAAW,EAAE,eAJT;AAKJ,MAAA,EAAE,EAAC,2BALC;AAMJ,MAAA,UAAU,EAAE;AACVC,QAAAA,cAAc,eACZ,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA,iCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFQ;AANR;AAAA;AAAA;AAAA;AAAA,YAHJ,eAiBF,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,IAAI,EAAC,oBAAjD;AAAsE,MAAA,OAAO,EAAEd,aAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBE,eAoBH;AAAA,gBACKL,UAAU,CAACoB,GAAX,CAAe,CAACC,GAAD,EAAMC,CAAN,kBACZ;AAAA,kBACKD,GAAG,CAACb;AADT,SAAUc,CAAV;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YApBG;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA3ED;;GAAMjC,O;;KAAAA,O;AA6EN,eAAeA,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios'\n\nconst updateCommentsForUser = async reqObj => {\n  const response = await axios.post(`http://localhost:5000/api/comments`,reqObj)\n\n  if (response.status !== 200) {\n    const text = await response.text()\n    throw new Error(text)\n  } \n\n  return await response\n}\n\n\nconst Comment = ({currentUserID, itemID}) => {\n    const useStyles = makeStyles((theme) => ({\n        margin: {\n          // margin: theme.spacing(1),\n          // marginLeft: theme.spacing.unit,\n          // marginRight: theme.spacing.unit,\n          border: \"1px solid black\",\n          padding: 2\n        },\n      }));\n      const classes = useStyles();\n\n    const [commentVal, setCommentVal] = useState(\"\")\n\n    const [commentArr, setcommentArr] = useState([])\n\n    useEffect( async () => {\n      const response = itemID && await axios.get(`http://localhost:5000/api/item?itemID=${itemID}`)\n      if(response){\n        setcommentArr(response.data.comments || [])\n      }\n    }, [])\n\n    const submithandler = async () => {\n        const newCommentArr = [...commentArr]\n        newCommentArr.push({\n            comment: commentVal,\n            timeStamp: new Date(),\n            itemID: itemID,\n            currentUserID: currentUserID\n        })\n        const fetchedItems = await updateCommentsForUser({\n          comment: commentVal,\n          timeStamp: new Date(),\n          itemID: itemID,\n          currentUserID: currentUserID\n      })\n      console.log(\"fetchedItems\",fetchedItems)\n      if(fetchedItems){\n        setcommentArr(newCommentArr)\n        setCommentVal(\"\")\n      }\n    }\n\n\n    return (\n        <div style={{display: \"flex\", flexDirection: \"column\"}}>\n            {console.log(commentVal)}\n            <div>Comments</div>\n            <TextField\n        className={classes.margin}\n        value={commentVal}\n        onChange={(e) => setCommentVal(e.target.value)}\n        placeholder={\"Add a Comment\"}\n        id=\"input-with-icon-textfield\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <PersonIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Button variant=\"contained\" color=\"primary\" href=\"#contained-buttons\" onClick={submithandler}>\n       Submit\n     </Button>\n     <div>\n         {commentArr.map((val, i) => (\n             <div key={i}>\n                 {val.comment}\n             </div>\n         ))}\n     </div>\n        </div>\n    )\n}\n\nexport default Comment"]},"metadata":{},"sourceType":"module"}